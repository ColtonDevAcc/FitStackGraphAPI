// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	fitstackapi "github.com/voodoostack/fitstackapi"
)

// UserRepo is an autogenerated mock type for the UserRepo type
type UserRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, user
func (_m *UserRepo) Create(ctx context.Context, user fitstackapi.User) (fitstackapi.User, error) {
	ret := _m.Called(ctx, user)

	var r0 fitstackapi.User
	if rf, ok := ret.Get(0).(func(context.Context, fitstackapi.User) fitstackapi.User); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(fitstackapi.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, fitstackapi.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByEmail provides a mock function with given fields: ctx, email
func (_m *UserRepo) GetByEmail(ctx context.Context, email string) (fitstackapi.User, error) {
	ret := _m.Called(ctx, email)

	var r0 fitstackapi.User
	if rf, ok := ret.Get(0).(func(context.Context, string) fitstackapi.User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(fitstackapi.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUsername provides a mock function with given fields: ctx, username
func (_m *UserRepo) GetByUsername(ctx context.Context, username string) (fitstackapi.User, error) {
	ret := _m.Called(ctx, username)

	var r0 fitstackapi.User
	if rf, ok := ret.Get(0).(func(context.Context, string) fitstackapi.User); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(fitstackapi.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
