// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	fitstackapi "github.com/voodoostack/fitstackapi"

	mock "github.com/stretchr/testify/mock"
)

// AuthTokenService is an autogenerated mock type for the AuthTokenService type
type AuthTokenService struct {
	mock.Mock
}

// CreateAccessToken provides a mock function with given fields: ctx, user
func (_m *AuthTokenService) CreateAccessToken(ctx context.Context, user fitstackapi.User) (string, error) {
	ret := _m.Called(ctx, user)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, fitstackapi.User) string); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, fitstackapi.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRefreshToken provides a mock function with given fields: ctx, user, tokenID
func (_m *AuthTokenService) CreateRefreshToken(ctx context.Context, user fitstackapi.User, tokenID string) (string, error) {
	ret := _m.Called(ctx, user, tokenID)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, fitstackapi.User, string) string); ok {
		r0 = rf(ctx, user, tokenID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, fitstackapi.User, string) error); ok {
		r1 = rf(ctx, user, tokenID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseToken provides a mock function with given fields: ctx, payload
func (_m *AuthTokenService) ParseToken(ctx context.Context, payload string) (fitstackapi.AuthToken, error) {
	ret := _m.Called(ctx, payload)

	var r0 fitstackapi.AuthToken
	if rf, ok := ret.Get(0).(func(context.Context, string) fitstackapi.AuthToken); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Get(0).(fitstackapi.AuthToken)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseTokenFromRequest provides a mock function with given fields: ctx, r
func (_m *AuthTokenService) ParseTokenFromRequest(ctx context.Context, r *http.Request) (fitstackapi.AuthToken, error) {
	ret := _m.Called(ctx, r)

	var r0 fitstackapi.AuthToken
	if rf, ok := ret.Get(0).(func(context.Context, *http.Request) fitstackapi.AuthToken); ok {
		r0 = rf(ctx, r)
	} else {
		r0 = ret.Get(0).(fitstackapi.AuthToken)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *http.Request) error); ok {
		r1 = rf(ctx, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
